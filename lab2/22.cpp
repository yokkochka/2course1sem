/*
Option 6

[Task 2] Debug the correct operation of sorting on arrays with the number of elements N=50 generated by a
random number generator in the range [1x0x0, 3x70x], where xx are the digits of the option number. In
addition, control the correctness of sorting by calculating the checksum and the number of series in the array
(format it as a subroutine).
*/

#include <cstdlib>
#include <ctime>
#include <iostream>
using namespace std;

void create_rnd_arr(short int arr[], int min_ch, int max_ch, int n);
void output_arr(short int arr[], int n);

void fill_arr(short int arr[], short int basket_arr[], int n);

void quick_sort(short int arr[], int start, int n);
int dop_quick_sort(short int arr[], int start, int end);

void basket_sort(short int arr[], int n);
void sorting_one_basket(short int basket[], int n);

void res_summa_and_series(short int quick_arr[], short int basket_arr[], int n);

int main() {
    time_t t;
    srand(time(&t));

    int min_ch = 16060;
    int max_ch = 36706;
    int n = 50;

    short int arr[n];
    short int basket_arr[n];

    create_rnd_arr(arr, min_ch, max_ch, n);

    fill_arr(arr, basket_arr, n);

    cout << "\nArray for quick sort: \n";
    output_arr(arr, n);
    quick_sort(arr, 0, n - 1);
    cout << "\nSorted array by quick sort:\n";
    output_arr(arr, n);

    cout << "\nArray for block sort: \n";
    output_arr(basket_arr, n);
    basket_sort(basket_arr, n);
    cout << "\nSorted array by block sort:\n";
    output_arr(basket_arr, n);

    cout << "\n[Task_2]" << endl;
    res_summa_and_series(arr, basket_arr, n);
}

void fill_arr(short int arr[], short int basket_arr[], int n) {
    for (int i = 0; i < n; i++) {
        basket_arr[i] = arr[i];
    }
}

void create_rnd_arr(short int arr[], int min_ch, int max_ch, int n) {
    short int y;
    for (int i = 0; i <= n; i++) {
        // num = m + rand() % (n - m + 1);
        arr[i] = rand() % (max_ch - min_ch + 1) + min_ch;
        if (arr[i] < 0) {
            arr[i] *= -1;
        }
    }
}

void output_arr(short int arr[], int n) {
    for (int i = 0; i < n; i++) cout << arr[i] << "  ";
    cout << "\n";
}

void quick_sort(short int arr[], int start, int end) {
    if (start >= end) {
        return;
    }
    int index_opora = dop_quick_sort(arr, start, end);

    quick_sort(arr, start, index_opora - 1);
    quick_sort(arr, index_opora + 1, end);
}

int dop_quick_sort(short int arr[], int start, int end) {
    int opora = arr[end];
    int index_sort = start;
    short int temp;

    for (int i = start; i < end; i++) {
        if (arr[i] <= opora) {
            temp = arr[i];
            arr[i] = arr[index_sort];
            arr[index_sort] = temp;
            index_sort++;
        }
    }
    temp = arr[end];
    arr[end] = arr[index_sort];
    arr[index_sort] = temp;

    return index_sort;
}

void basket_sort(short int arr[], int n) {
    short int min_val = arr[0];
    short int max_val = arr[0];
    for (int i = 1; i < n; i++) {
        if (arr[i] < min_val) {
            min_val = arr[i];
        }
        if (arr[i] > max_val) {
            max_val = arr[i];
        }
    }

    int num_baskets = n;
    int basket_sizes[num_baskets] = {0};
    short int* baskets[num_baskets];

    for (int i = 0; i < num_baskets; i++) {
        baskets[i] = new short int[n];
    }

    for (int i = 0; i < n; i++) {
        int basket_index = int((arr[i] - min_val) / (max_val - min_val) * (num_baskets - 1));

        baskets[basket_index][basket_sizes[basket_index]] = arr[i];

        basket_sizes[basket_index]++;
    }

    for (int i = 0; i < num_baskets; i++) {
        sorting_one_basket(baskets[i], basket_sizes[i]);
    }

    int index = 0;
    for (int i = 0; i < num_baskets; i++) {
        for (int j = 0; j < basket_sizes[i]; j++) {
            arr[index++] = baskets[i][j];
        }
        delete[] baskets[i];
    }
}

void sorting_one_basket(short int basket[], int n) {
    for (int i = 1; i < n; i++) {
        short int key = basket[i];
        int j = i - 1;
        while (j >= 0 && basket[j] > key) {
            basket[j + 1] = basket[j];
            j--;
        }
        basket[j + 1] = key;
    }
}

void res_summa_and_series(short int quick_arr[], short int basket_arr[], int n) {
    int summa_quick = 0;
    int count_series_quick = 1;

    int summa_basket = 0;
    int count_series_basket = 1;

    for (int i = 1; i < n; i++) {
        summa_basket += basket_arr[i];
        summa_quick += quick_arr[i];
        if (quick_arr[i - 1] != (quick_arr[i] - 1)) {
            count_series_quick++;
        }
        if (basket_arr[i - 1] != (basket_arr[i] - 1)) {
            count_series_basket++;
        }
    }
    cout << "\nQuock sort: \nSumma: " << summa_quick << "\nSeries: " << count_series_quick << endl;
    cout << "\nBasket sort: \nSumma: " << summa_quick << "\nSeries: " << count_series_quick << endl;
}